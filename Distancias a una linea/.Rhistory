# Librerias
library(sf)
library(leaflet)
library(tidyverse)
# # Descarga datos
# curl::curl_download("https://opendata.arcgis.com/datasets/e735940321bd4383bab528a91bf526f8_0.zip?outSR=%7B%22latestWkid%22%3A3857%2C%22wkid%22%3A102100%7D",
#                     destfile = "frontera.zip")
#
# # Deszipeado
# unzip(zipfile = "frontera.zip")
# Abrido
f <- st_read("Mexico_and_US_Border.shp")
# Ploteado
plot(f, max.plot = 1)
# # Descomponemos la linea en sus coordenadas
# ptos_linea <- st_coordinates(f) %>%
#   as.data.frame() %>%
#   st_as_sf(coords = c("X", "Y"))
#
# st_crs(ptos_linea) <- 4326
# Determinamos un punto ()
pto <- data.frame(x = -116.615094, y = 31.848142) %>%
st_as_sf(coords = c("x", "y"))
st_crs(pto) <- 4326
# Calculamos la distancia
st_distance(pto, f)
# Calculamos la distancia entre puntos:
ptos_linea$distancias <- st_distance(ptos_linea, pto)
# Sacamos la distancia minima
min(ptos_linea$distancias)
# Sacamos el punto
punto_frontera <- ptos_linea[ptos_linea$distancias == min(ptos_linea$distancias),]
# linea de distancia
linea <- st_linestring(matrix(c(pto[,"geometry"] %>%
st_coordinates(),
punto_frontera[,"geometry"] %>%
st_coordinates()),
ncol = 2, byrow = TRUE))
# Mapeamos chido
leaflet() %>%
addTiles() %>%
addCircleMarkers(data = pto) %>%
addCircleMarkers(data = punto_frontera) %>%
addPolylines(data = linea) %>%
addPolylines(data = f, color = "red")
# Librerias
library(sf)
library(leaflet)
library(tidyverse)
# Descarga datos
curl::curl_download("https://opendata.arcgis.com/datasets/e735940321bd4383bab528a91bf526f8_0.zip?outSR=%7B%22latestWkid%22%3A3857%2C%22wkid%22%3A102100%7D",
destfile = "frontera.zip")
# Deszipeado
unzip(zipfile = "frontera.zip")
# Abrido
f <- st_read("Mexico_and_US_Border.shp")
# Ploteado
plot(f, max.plot = 1)
# # Descomponemos la linea en sus coordenadas
# ptos_linea <- st_coordinates(f) %>%
#   as.data.frame() %>%
#   st_as_sf(coords = c("X", "Y"))
#
# st_crs(ptos_linea) <- 4326
# Determinamos un punto ()
pto <- data.frame(x = -116.615094, y = 31.848142) %>%
st_as_sf(coords = c("x", "y"))
st_crs(pto) <- 4326
# Calculamos la distancia
st_distance(pto, f)
# Calculamos la distancia entre puntos:
ptos_linea$distancias <- st_distance(ptos_linea, pto)
# Sacamos la distancia minima
min(ptos_linea$distancias)
# Sacamos el punto
punto_frontera <- ptos_linea[ptos_linea$distancias == min(ptos_linea$distancias),]
# linea de distancia
linea <- st_linestring(matrix(c(pto[,"geometry"] %>%
st_coordinates(),
punto_frontera[,"geometry"] %>%
st_coordinates()),
ncol = 2, byrow = TRUE))
# Mapeamos chido
leaflet() %>%
addTiles() %>%
addCircleMarkers(data = pto) %>%
addCircleMarkers(data = punto_frontera) %>%
addPolylines(data = linea) %>%
addPolylines(data = f, color = "red")
# Descarga datos
curl::curl_download("https://opendata.arcgis.com/datasets/e735940321bd4383bab528a91bf526f8_0.zip?outSR=%7B%22latestWkid%22%3A3857%2C%22wkid%22%3A102100%7D",
destfile = "frontera.zip")
# Deszipeado
unzip(zipfile = "frontera.zip")
# Abrido
f <- st_read("Mexico_and_US_Border.shp")
# Ploteado
plot(f, max.plot = 1)
# Determinamos un punto ()
pto <- data.frame(x = -116.615094, y = 31.848142) %>%
st_as_sf(coords = c("x", "y"))
st_crs(pto) <- 4326
# Calculamos la distancia
st_distance(pto, f)
# Calculamos la distancia entre puntos:
ptos_linea$distancias <- st_distance(ptos_linea, pto)
# Calculamos la distancia entre puntos:
ptos_linea$distancias <- st_distance(ptos_linea, pto)
# Sacamos la distancia minima
min(ptos_linea$distancias)
# Sacamos el punto
punto_frontera <- ptos_linea[ptos_linea$distancias == min(ptos_linea$distancias),]
# linea de distancia
linea <- st_linestring(matrix(c(pto[,"geometry"] %>%
st_coordinates(),
punto_frontera[,"geometry"] %>%
st_coordinates()),
ncol = 2, byrow = TRUE))
# Mapeamos chido
leaflet() %>%
addTiles() %>%
addCircleMarkers(data = pto) %>%
addCircleMarkers(data = punto_frontera) %>%
addPolylines(data = linea) %>%
addPolylines(data = f, color = "red")
# Descomponemos la linea en sus coordenadas
ptos_linea <- st_coordinates(f) %>%
as.data.frame()
# Ploteado
plot(f, max.plot = 1)
# Descomponemos la linea en sus coordenadas
ptos_linea <- st_coordinates(f) %>%
as.data.frame()
# Determinamos un punto (El Colmex)
pto <- data.frame(x = -99.207384, y = 19.303718) %>%
st_as_sf(coords = c("x", "y"))
st_crs(pto) <- 4326
# Calculamos la distancia
st_distance(pto, f)
st_crs(pto) <- 4326
# Calculamos la distancia
st_distance(pto, f)
# Calculamos la distancia entre puntos:
ptos_linea$distancias <- st_distance(ptos_linea, pto)
ptos_linea$distancias <- st_distance(ptos_linea, pto)
# Mapeamos chido
leaflet() %>%
addTiles() %>%
addCircleMarkers(data = pto) %>%
addCircleMarkers(data = punto_frontera) %>%
addPolylines(data = linea) %>%
addPolylines(data = f, color = "red")
# linea de distancia
linea <- st_linestring(matrix(c(pto[,"geometry"] %>%
st_coordinates(),
punto_frontera[,"geometry"] %>%
st_coordinates()),
ncol = 2, byrow = TRUE))
# Mapeamos chido
leaflet() %>%
addTiles() %>%
addCircleMarkers(data = pto) %>%
addCircleMarkers(data = punto_frontera) %>%
addPolylines(data = linea) %>%
addPolylines(data = f, color = "red")
![](conversacionJesus.png)
# Ploteado
plot(f)
# Ploteado
plot(f, max.plot = 1)
st_crs(f)
# Homologamos el sistema de Coordenadas de Referencia con la base de la línea de la Frontera Norte
st_crs(pto) <- st_crs(f)
st_distance(pto, f)
st_distance(pto, f) /1000
st_distance(pto, f)
st_distance(pto, f) /1000
st_distance(pto, f)
# Descomponemos la linea en sus coordenadas
ptos_linea <- st_coordinates(f) %>%
as.data.frame() %>%
st_as_sf(coords = c("X", "Y"))
# Descomponemos la linea en sus coordenadas
ptos_linea <- st_coordinates(f) %>%
as.data.frame() %>%
st_as_sf(coords = c("X", "Y"))
st_distance(ptos_linea, pto)
# Descomponemos la linea en sus coordenadas
ptos_linea <- st_coordinates(f) %>%
as.data.frame() %>%
st_as_sf(coords = c("X", "Y"))
st_distance(ptos_linea, pto)
class(ptos_linea)
st_crs(ptos_linea)
st_crs(ptos_linea) <- st_crs(f)
st_crs(ptos_linea)
class(ptos_linea)
st_crs(ptos_linea)
st_distance(ptos_linea, pto)
distancias <- st_distance(ptos_linea, pto)
head(distancias)
min(distancias)
head(distancias)
min(distancias)
min(distancias) %>% as.numeric()
distancia_minima <- min(distancias) %>%
as.numeric()
# En kilometros
distancias / 1000
# En kilometros
distancia_minima / 1000
distancias == distancia_minima
# Obtencion de la distancia minima
distancia_minima <- min(distancias)
# En kilometros
(distancia_minima / 1000) %>% as.numeric()
distancia_minima
# Descomponemos la linea en sus coordenadas
ptos_linea <- st_coordinates(f) %>%
as.data.frame() %>%
st_as_sf(coords = c("X", "Y"))
st_crs(ptos_linea) <- st_crs(f)
class(ptos_linea)
st_crs(ptos_linea)
# Obtencion de la distancia minima
distancia_minima <- min(distancias)
# En kilometros
(distancia_minima / 1000) %>% as.numeric()
# Punto minimo
ptos_linea[distancias == distancia_minima]
distancias == distancia_minima
ptos_linea
# Punto minimo
ptos_linea[distancias == distancia_minima,]
# Punto minimo
punto_minima_distancia <-
ptos_linea[distancias == distancia_minima,]
# linea de distancia
linea <- st_linestring(matrix(c(pto[,"geometry"] %>%
st_coordinates(),
punto_minima_distancia[,"geometry"] %>% st_coordinates()), ncol = 2, byrow = TRUE))
# linea de distancia
linea <- st_linestring(matrix(c(pto[,"geometry"] %>%
st_coordinates(),
punto_minima_distancia[,"geometry"] %>% st_coordinates()), ncol = 2, byrow = TRUE))
# Mapeamos chido
leaflet() %>%
addTiles() %>%
addCircleMarkers(data = pto) %>%
addCircleMarkers(data = punto_frontera) %>%
addPolylines(data = linea) %>%
addPolylines(data = f, color = "red")
# Punto minimo
punto_frontera <-
ptos_linea[distancias == distancia_minima,]
# linea de distancia
linea <- st_linestring(matrix(c(pto[,"geometry"] %>%
st_coordinates(),
punto_frontera[,"geometry"] %>% st_coordinates()), ncol = 2, byrow = TRUE))
# Mapeamos chido
leaflet() %>%
addTiles() %>%
addCircleMarkers(data = pto) %>%
addCircleMarkers(data = punto_frontera) %>%
addPolylines(data = linea) %>%
addPolylines(data = f, color = "red")
# Mapeamos chido
leaflet() %>%
addTiles() %>%
addCircleMarkers(data = pto) %>%
addCircleMarkers(data = punto_frontera) %>%
addPolylines(data = linea) %>%
addPolylines(data = f, color = "red")
# linea de distancia
linea <- st_linestring(matrix(c(pto[,"geometry"] %>%
st_coordinates(),
punto_frontera[,"geometry"] %>% st_coordinates()), ncol = 2, byrow = TRUE))
# Mapeamos chido
leaflet() %>%
addTiles() %>%
addCircleMarkers(data = pto) %>%
addCircleMarkers(data = punto_frontera) %>%
addPolylines(data = linea) %>%
addPolylines(data = f, color = "red")
# Las coordenadas del Colmex en formato tabla-dataframe
pto <- data.frame(x = -99.20775, y = 19.303741) %>%
st_as_sf(coords = c("x", "y"))
# Homologamos el sistema de Coordenadas de Referencia con la base de la línea de la Frontera Norte
st_crs(pto) <- st_crs(f)
distancias <- st_distance(ptos_linea, pto)
distancia_minima <- min(distancias)
distancia_minima
distancia <- function(X, Y){
pto <- data.frame(x = X, y = Y) %>%
st_as_sf(coords = c("x", "y"))
st_crs(pto) <- st_crs(f)
distancias <- st_distance(ptos_linea, pto)
distancia_minima <- min(distancias)
(distancia_minima / 1000) %>% as.numeric()
}
# Distancia a un punto del mpio de Mexicali
distancia(X = -115.418556, Y = 31.795112)
pto <- data.frame(x = X, y = Y) %>%
st_as_sf(coords = c("x", "y"))
distancia <- function(X, Y){
pto <- data.frame(x = X, y = Y) %>%
st_as_sf(coords = c("x", "y"))
st_crs(pto) <- st_crs(f)
st_distance(pto, f)
#       distancias <- st_distance(ptos_linea, pto)
# distancia_minima <- min(distancias)
# (distancia_minima / 1000) %>% as.numeric()
}
# Distancia a un punto del mpio de Mexicali
distancia(X = -115.418556, Y = 31.795112)
# Distancia a Puerto Peñasco
distancia(X = -113.534104, Y = 31.309766)
# Distancia al CIDE
distancia(X = -99.263426, Y = 19.374515)
# Distancias a todos estos puntos
distancia(X = c(-115.418556,-113.534104, -99.263426),
Y = c(31.795112, 31.309766, 19.374515))
