"0",""
"0","# Funcion para dibujar las lineas de minima distancia"
"0","# Nota, esta función asume que previamente ya cargamos "
"0","# la base de datos de la frontera y la almacenamos en el objeto f"
"0","dibuja_lineas_minima_distancia <- function(X,Y){"
"0",""
"0","  # Creamos el punto a partir de los argumentos X y Y"
"0","  pto <- data.frame(x = X, y = Y) %>% "
"0","        st_as_sf(coords = c(""x"", ""y"")) "
"0",""
"0","  # Homologamos el Sistema de Coordenadas de Referencia"
"0","  st_crs(pto) <- st_crs(f)"
"0","  "
"0","  # Extraemos los vértices de la linea"
"0","  ptos_linea <- st_coordinates(f) %>%"
"0","    as.data.frame() %>%"
"0","    st_as_sf(coords = c(""X"", ""Y"")) "
"0","  "
"0","  # Homologamos el Sistema de Coordenadas de Referencia"
"0","  st_crs(ptos_linea) <- st_crs(f)"
"0",""
"0","  # Sacamos las distancias del punto a todos los vertices de la frontera"
"0","  distancias <- st_distance(ptos_linea, pto)"
"0",""
"0","  # Obtencion de la distancia minima"
"0","  distancia_minima <- min(distancias) "
"0",""
"0","  # Guardamos el punto de la frontera con la distancia minima"
"0","  punto_frontera <<- "
"0","    ptos_linea[distancias == distancia_minima,]"
"0",""
"0","  # Construimos la linea de distancia minima"
"0","  linea <- st_linestring(matrix(c(pto[,""geometry""] %>% "
"0","                                st_coordinates(), "
"0","                                punto_frontera[,""geometry""] %>%       st_coordinates()), ncol = 2, byrow = TRUE))  "
"0","  "
"0","  # Seleccionamos la linea como objeto a retornar de la funcion "
"0","  return(linea)"
"0","  "
"0","}"
"0",""
"0","# Probamos la funcion, sacando la linea del CIDE a la frontera"
"0","lineaCIDE <- dibuja_lineas_minima_distancia(X = -99.263426, Y = 19.374515)"
"0","class(lineaCIDE)"
"1","[1]"
"1"," ""XY""        "
"1"," ""LINESTRING"""
"1"," ""sfg""       "
"1","
"
"0","leaflet(lineaCIDE) %>% addTiles() %>% addPolylines(color = ""#005700"")"
